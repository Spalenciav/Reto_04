# -*- coding: utf-8 -*-
"""Code_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gR3bBYjgcfx3i5LjkjGJhgusmXdc65VR
"""

class MenuItem:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def calculate_total(self, quantity):
        return self.price * quantity


class Beverage(MenuItem):
    def __init__(self, name, price, size):
        super().__init__(name, price)
        self.size = size


class Appetizer(MenuItem):
    def __init__(self, name, price, portion):
        super().__init__(name, price)
        self.portion = portion


class MainCourse(MenuItem):
    def __init__(self, name, price, protein):
        super().__init__(name, price)
        self.protein = protein


class Order:
    def __init__(self):
        self.items = []

    def add_item(self, item, quantity=1):
        self.items.append((item, quantity))

    def calculate_total(self):
        total = 0
        beverage_count = 0
        appetizer_count = 0
        main_course_count = 0

        for item, quantity in self.items:
            if isinstance(item, Beverage):
                beverage_count += 1
            elif isinstance(item, Appetizer):
                appetizer_count += 1
            elif isinstance(item, MainCourse):
                main_course_count += 1

            total += item.calculate_total(quantity)

        # Aplicar descuento si se pide al menos una bebida, una entrada y un plato principal
        if beverage_count >= 1 and appetizer_count >= 1 and main_course_count >= 1:
            discount = total * 0.1
            total -= discount

        return total


class Payment:
    def __init__(self, amount, method):
        self._amount = amount
        self._method = method

    # Getters and Setters
    def get_amount(self):
        return self._amount

    def set_amount(self, amount):
        self._amount = amount

    def get_method(self):
        return self._method

    def set_method(self, method):
        self._method = method

    def process_payment(self):
        if isinstance(self._method, Card):
            self._method.pay(self._amount)
        elif isinstance(self._method, Cash):
            self._method.pay(self._amount)
        else:
            print("Método de pago no válido")


class PaymentMethod:
    def __init__(self):
        pass

    def pay(self, amount):
        raise NotImplementedError("Subclasses must implement pay()")


class Card(PaymentMethod):
    def __init__(self, number, cvv):
        super().__init__()
        self._number = number
        self._cvv = cvv

    def pay(self, amount):
        print(f"Pagando {amount} con tarjeta {self._number[-4:]}")


class Cash(PaymentMethod):
    def __init__(self, amount_paid):
        super().__init__()
        self._amount_paid = amount_paid

    def pay(self, amount):
        if self._amount_paid >= amount:
            print(f"Pago realizado en efectivo. Cambio: {self._amount_paid - amount}")
        else:
            print(f"Fondos insuficientes. Faltan {amount - self._amount_paid} para completar el pago.")


if __name__ == "__main__":
    menu_items = [
        Beverage("Soda", 5000, "Regular"),
        Beverage("Cerveza", 10000, "Grande"),
        Appetizer("Nachos", 12000, "Grande"),
        Appetizer("Alitas de pollo", 15000, "12 piezas"),
        MainCourse("Hamburguesa", 20000, "Res"),
        MainCourse("Filete", 35000, "Ternera"),
        Beverage("Jugo", 6000, "Pequeño"),
        Appetizer("Ensalada César", 14000, "Individual"),
        MainCourse("Salmón a la parrilla", 30000, "Salmón"),
        MainCourse("Pasta Alfredo", 25000, "Pollo")
    ]

    order = Order()
    order.add_item(menu_items[0], 2)
    order.add_item(menu_items[3])
    order.add_item(menu_items[7])

    total_bill = order.calculate_total()
    print("Total de la factura:", total_bill)